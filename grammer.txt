<program> =>						( <procedure_declaration> | <function_declaration>)* <main_declaration>

<procedure_declaration> =>			'procedure' <func_proc_header> ';' <func_proc_implementation>
<function_declaration> =>			'function'  <func_proc_header> ':' <type> ';' <func_proc_implementation>
<main_declaration> =>				<variable_declaration_part>? | <block> '.'				

<func_proc_header> =>				<identifier> '(' ( <variable_declaration> ';' )* ')'
<func_proc_implementation> =>		<variable_declaration_part>? <block> ';'	
<variable_declaration_part> =>		'var' (<variable declaration> ';')*
<variable_declaration> => 			<identifier> ( ',' <identifier> )* ':' <type>
<block> =>							'begin' (	<if_statement> | <while_statement> | <for_statement> | 
												'break'' | 'continue' | 'exit' |
												 <expression> | <function_call>	)* 'end'

<function_call> =>					<identifier> '(' <arguments> ')' 
<arguments> =>						( <expression> )? ( ',' <expression> )*

<for_statement> => 					'for' <expression> 'to' <expression> 'do' <block> ';'
<if_statement> =>					'if'  <logic_expression> 'then' <block> ( ';' | ( 'else' <block> ';') ) 
				
<logic_expression> 					<compare> ( ( '&&' | '||' ) <compare> )?
<compare> =>						<expression> ( '==' | '!=' | '<' | '>' | '<=' | '>=' ) <expression>		

<expression> => 					<term> ( ( '+' | '-' ) <term> )*
<term> => 							<fact> ( ( '*' | '/' | '%' ) <fact> )*
<fact> => 							( '-' )? ( <identifier> | <array_element> | <function_call> | '(' <expression> ')' )

<type> => 							'integer' | 'char' | 'string'
<array_element> => 					<identifier> ( '[' <expression> ']' )+


